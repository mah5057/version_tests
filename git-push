#!/usr/bin/env python

from __future__ import (
    division,
    unicode_literals,
    print_function,
    absolute_import
)

from collections import OrderedDict
import json
import subprocess
import shlex
import argparse
import logging
import sys

def prompt(question):
    reply = str(raw_input(question + ' (y/n): ')).lower().strip()
    if reply[0] == 'y':
        return True
    if reply[0] == 'n':
        return False
    else:
        return prompt("Please enter 'y' or 'n'...")

def main():
    parser = \
        argparse.ArgumentParser(description='update carbon-io docs submodules')
    
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='log debug output')
    parser.add_argument("message", help="Commit message goes here")
    parser.add_argument("version", help="Version string goes here")

    opts = parser.parse_args(sys.argv[1:])

    logging.basicConfig(level=logging.DEBUG if opts.verbose else logging.WARN)

    try:
        with open('package.json', 'r') as f:
            package_json = json.load(f, object_pairs_hook=OrderedDict)
            version = package_json['version']

        if version != opts.version:
            print("package.json version (%s) does not match supplied version (%s)!!" % (version, opts.version))
            make_package_version_change = prompt("Would you like to change package.json to use the supplied version(%s)?" % (opts.version))
            if make_package_version_change: 
                with open('package.json', 'w') as f:
                    package_json['version'] = opts.version
                    json.dump(package_json, f, indent=4, sort_keys=False)
            else:
                print("Aborting, please make sure that the package.json version matches the supplied tag.")
                sys.exit(1)
        
        with open('package.json', 'r') as f:
            print(json.dumps(package_json, indent=4, sort_keys=False))
        
        if prompt("Would you like to push this change?"):
            git_commit_command = "git commit -am \"%s\"" % opts.message
            git_tag_command = "git tag -a %s -m %s" % (opts.version, opts.version)
            git_push_command = "git push --tags origin master"

            print("Issuing git command: %s" % (git_commit_command))
            subprocess.call(shlex.split(git_commit_command))
            print("Issuing git command: %s" % (git_tag_command))
            subprocess.call(shlex.split(git_tag_command))
            print("Issuing git command: %s" % (git_push_command))
            subprocess.call(shlex.split(git_push_command))
        else:
            print("Aborting...")

    except Exception, e:
        logging.exception(e)
        return -1
    
    return 0


if __name__ == '__main__':
    sys.exit(main())

